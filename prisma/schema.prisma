// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  spotifyId     String?   @unique
  
  accounts    Account[]
  sessions    Session[]
  lobbyMemberships LobbyMember[]
  lobbiesCreated   Lobby[] @relation("LobbyHost")
  gameParticipations GameParticipant[]
  votes       Vote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lobby {
  id          String   @id @default(cuid())
  name        String
  hostId      String
  isActive    Boolean  @default(true)
  maxPlayers  Int      @default(8)
  roundCount  Int      @default(5)
  
  host        User     @relation("LobbyHost", fields: [hostId], references: [id])
  members     LobbyMember[]
  games       Game[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LobbyMember {
  id       String  @id @default(cuid())
  userId   String
  lobbyId  String
  isReady  Boolean @default(false)
  
  user     User    @relation(fields: [userId], references: [id])
  lobby    Lobby   @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  
  @@unique([userId, lobbyId])
}

model Game {
  id            String      @id @default(cuid())
  lobbyId       String
  status        GameStatus  @default(WAITING)
  currentRound  Int         @default(0)
  totalRounds   Int         @default(5)
  
  lobby         Lobby       @relation(fields: [lobbyId], references: [id])
  participants  GameParticipant[]
  rounds        Round[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model GameParticipant {
  id       String @id @default(cuid())
  gameId   String
  userId   String
  score    Int    @default(0)
  
  game     Game   @relation(fields: [gameId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  
  @@unique([gameId, userId])
}

model Round {
  id          String      @id @default(cuid())
  gameId      String
  roundNumber Int
  trackId     String
  trackName   String
  trackArtist String
  trackUri    String
  ownerId     String
  status      RoundStatus @default(PLAYING)
  timeLimit   Int         @default(30) // seconds
  
  game        Game        @relation(fields: [gameId], references: [id])
  votes       Vote[]
  
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime    @default(now())
}

model Vote {
  id          String   @id @default(cuid())
  roundId     String
  voterId     String
  guessedUserId String
  
  round       Round    @relation(fields: [roundId], references: [id])
  voter       User     @relation(fields: [voterId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@unique([roundId, voterId])
}

enum GameStatus {
  WAITING
  LOADING
  PLAYING
  FINISHED
}

enum RoundStatus {
  PLAYING
  FINISHED
}
